### Arguable Redux

Toward an arguable that will generate bash and zsh compltions.

By using Cadence, Arguable still catches any error raised during the invocation of the program body. If you use Cadence to define your program body, then any exception thrown in an asynchronous step is going to forwarded to Arguable.

The `parse` method is no longer exposed. You use Arguable as a framework. To test your main function, you can invoke body directly, passing in an environment, arguments, and I/O streams. Pass-through I/O streams are created for testing, if no streams are provided.

The argument specification language has not changed.

Exits are now more orderly. If you're using a control-flow library like Cadence, then you can catch an exception and route it out to the Arguable callback. If raise a control flow exception using the `abend`, `help` or `exit` methods of the `options` object, you can use Cadence to wind down your program before an orderly exit.

### Issue by Issue

 * Remove unused arguments to `createUsage`. #107.
 * Set exit code on exit. #106.
 * Rename `propagate` to `exit`. #105.
 * Parse usage all the way through. #104.
 * Upgrade Proof to 0.0.50. #103.
